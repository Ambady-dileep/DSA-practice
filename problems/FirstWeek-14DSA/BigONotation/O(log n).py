# ðŸ§  What is O(log n)?
# O(log n) means that with every step, the problem size gets divided by 2 (or 3, or some base â€” usually 2).
# Itâ€™s the opposite of O(n), where you go one-by-one.
# Here, you cut the problem in half every time.

# ðŸ”¥ Real-Life Example:
# Youâ€™re searching for a name in a phone book with 1000 pages.
# Instead of reading page 1, 2, 3, â€¦ 1000 (O(n)),
# you do this:
# Open to page 500 â†’ too far!
# Go to page 250 â†’ closer!
# Page 125 â†’ almost there!
# Each time, you eliminate half the book.
# Thatâ€™s O(log n) efficiency.

# ðŸ§® How Many Steps Does O(log n) Take?
# Letâ€™s say you're dividing n by 2 repeatedly until you hit 1.

# n = 16
# â†’ 16 â†’ 8 â†’ 4 â†’ 2 â†’ 1
# â†’ Total steps = 4
# â†’ logâ‚‚(16) = 4
# n	         logâ‚‚(n)steps
# 8	              3
# 16	          4
# 32	          5

# âœ… Code Example: Binary Search (Classic O(log n))

# def binary_search(arr, target):
#     left = 0
#     right = len(arr) - 1

#     while left <= right:
#         mid = (left + right) // 2
#         if arr[mid] == target:
#             return mid
#         elif arr[mid] < target:
#             left = mid + 1
#         else:
#             right = mid - 1
#     return -1
# Each loop cuts the array in half â†’ O(log n)

# ðŸ”¥ Where You See O(log n)

# Algorithm / Task	        Why it's O(log n)?
# Binary Search	        Divide array in half each step

# ðŸ“Œ Key to Remember:
# "O(n)" = Linear â†’ Step-by-step
# "O(log n)" = Smart â†’ Cut-in-half strategy
# "O(1)" = God-level â†’ Instant