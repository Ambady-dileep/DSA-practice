# table_size = 10
# key = "apple"
# hash_value = hash(key)
# ans = hash_value % table_size
# print(ans)

class HashMap:
    def __init__(self, size=10):
        self.size = size
        self.table = [[] for _ in range(size)]

    def _hash(self, key):
        return hash(key) % self.size

    def insert(self, key, value):
        index = self._hash(key)
        bucket = self.table[index]

        for i, (k, v) in enumerate(bucket):
            if k == key:
                bucket[i] = (key, value)
                return
        bucket.append((key, value))

    def get(self, key):
        index = self._hash(key)
        bucket = self.table[index]

        for k, v in bucket:
            if k == key:
                return v
        return None

    def delete(self, key):
        index = self._hash(key)
        bucket = self.table[index]

        for i, (k, v) in enumerate(bucket):
            if k == key:
                del bucket[i]
                return True
        return False


h = HashMap()

h.insert("apple", 10)
h.insert("banana", 20)
print(h.get("apple"))     # 10
print(h.get("banana"))    # 20

h.insert("apple", 99)
print(h.get("apple"))     # 99 (updated)

h.delete("banana")
print(h.get("banana"))    # None


class HashMap:
    def __init__(self, size=10):
        self.size = size
        self.table = [[] for _ in range(size)]

    def _hash(self, key):
        return hash(key) % self.size
        
    def insert(self,key,value):
        index = self._hash(key)
        bucket = self.table[index]
        for i,(k,v) in enumerate(bucket):
            if k == key:
                bucket[i]=(key,value)
                return
        bucket.append((key,value))

    def get(self, key):
        index = self._hash(key)
        bucket = self.table[index]

        for k, v in bucket:
            if k == key:
                return v
        return None

    def delete(self, key):
        index = self._hash(key)
        bucket = self.table[index]  

        for i, (k, v) in enumerate(bucket):
            if k == key:
                del bucket[i]
                return True
        return False


h = HashMap()

h.insert("apple", 10)
h.insert("banana", 20)
print(h.get("apple"))     # 10
print(h.get("banana"))    # 20

h.insert("apple", 99)
print(h.get("apple"))     # 99 (updated)

h.delete("banana")
print(h.get("banana"))    # None



###########################################################################################################################

class HashMap:
    def __init__(self, size=10):
        self.size = size
        self.table = [[] for _ in range(size)]
        self.count = 0  # to track number of keys

    def _hash(self, key):
        return hash(key) % self.size

    def insert(self, key, value):
        index = self._hash(key)
        bucket = self.table[index]

        for i, (k, v) in enumerate(bucket):
            if k == key:
                bucket[i] = (key, value)
                return
        bucket.append((key, value))
        self.count += 1

    def get(self, key):
        index = self._hash(key)
        bucket = self.table[index]

        for k, v in bucket:
            if k == key:
                return v
        return None

    def delete(self, key):
        index = self._hash(key)
        bucket = self.table[index]

        for i, (k, v) in enumerate(bucket):
            if k == key:
                del bucket[i]
                self.count -= 1
                return True
        return False

    # ğŸ”¹ For print(h)
    def __str__(self):
        result = ""
        for i, bucket in enumerate(self.table):
            result += f"{i}: {bucket}\n"
        return result

    # ğŸ”¹ For len(h)
    def __len__(self):
        return self.count

    # ğŸ”¹ For "key" in h
    def __contains__(self, key):
        return self.get(key) is not None

    # ğŸ”¹ For h["Apple"]
    def __getitem__(self, key):
        value = self.get(key)
        if value is None:
            raise KeyError(f"{key} not found")
        return value

    # ğŸ”¹ For h["Apple"] = 10
    def __setitem__(self, key, value):
        self.insert(key, value)

    # ğŸ”¹ For del h["Apple"]
    def __delitem__(self, key):
        success = self.delete(key)
        if not success:
            raise KeyError(f"{key} not found")


h = HashMap()
h["Apple"] = 10
h["Orange"] = 20
h["Mango"] = 30

print(h["Apple"])         # 10
print("Mango" in h)       # True
print(len(h))             # 3
del h["Orange"]
print(len(h))             # 2
print(h)                  # Prints all buckets
