# class Node:
#     def __init__(self,data):
#         self.data = data
#         self.next = None 
        
# class Linkedlist:
#     def __init__(self):
#         self.head = None 
        
#     def append(self,data):
#         new_node = Node(data)
#         if self.head is None:
#             self.head = new_node
#             return
#         current = self.head
#         while current.next:
#             current = current.next
#         current.next = new_node
    
#     def print(self):
#         if self.head is None:
#             print("No linkedlist exists")
#             return
#         current = self.head
#         while current:
#             print(current.data,end = "-->")
#             current = current.next
#         print("None")
    
#     def insert_at_beginning(self,data):
#         new_node = Node(data)
#         new_node.next = self.head
#         self.head = new_node
            
#     def insert_by_position(self,pos,data):
#         new_node = Node(data)
#         if pos == 0:
#             new_node.next = self.head
#             self.head = new_node
#             return
#         current = self.head
#         count = 0
#         while current and count < pos-1:
#             current = current.next
#             count+=1 
#         if current is None:
#             print("out of bound")
#             return
        
#         new_node.next = current.next
#         current.next = new_node
       
#     def delete_duplicate(self):
#         current = self.head
#         prev = None
#         seen = set()
#         while current:
#             if current.data in seen:
#                 prev.next = current.next
#             else:
#                 seen.add(current.data)
#                 prev = current
#             current = current.next
    
#     def delete_by_position(self,pos):
#         if pos == 0:
#             self.head = self.head.next
#             return
#         current = current.next
#         count = 0
#         while current and count < pos-1:
#             current = current.next
#             count+=1 
            
#         if current is None and current.next is None:
#             print("position out of bound")
#             return
#         current = current.next.next
        
# ll = Linkedlist()
# ll.append(1)
# ll.append(2)
# ll.append(3)
# ll.append(2)
# # ll.print()
# ll.insert_at_beginning(4)
# # ll.print()
# ll.insert_by_position(4,5)
# # ll.print()
# ll.delete_duplicate()
# # ll.print()
# ll.delete_by_position(0)
# ll.insert_by_position(3,4)
# ll.print()



# def remove_char(word):
#     freq = {}
#     for i in word:
#         if i in freq:
#             freq[i]+=1 
#         else:
#             freq[i]=1 
#     for key,value in freq.items():
#         if value == 1:
#             return key
    
# print(remove_char("swiss"))

       
# def is_anagram(a,b):
#     return sorted(a)==sorted(b)
# print(is_anagram("save","vase"))


# def remove_longest_string(arr):
#     if not arr:
#         return []
#     longest = max(arr, key=len)   # Find the longest string
#     arr.remove(longest)           # Remove it
#     return arr

# arr = ["apple", "banana", "kiwi", "watermelon", "mango"]
# print(remove_longest_string(arr))
# # ➜ ['apple', 'banana', 'kiwi', 'mango']

# check if array is sorted or not
# def is_sorted(arr):
#     for i in range(len(arr)-1):
#         if arr[i] > arr[i+1]:
#             return False
#         return True

# print(is_sorted([1, 2, 3, 4])) 



# Check if a string is balanced
# def is_balanced(s):
#     stack = []
#     pairs = {')': '(', '}': '{', ']': '['}

#     for char in s:
#         if char in '({[':
#             stack.append(char)
#         elif char in ')}]':
#             if not stack or stack[-1] != pairs[char]:
#                 return False
#             stack.pop()
#     return not stack  # If stack is empty, it's balanced

# print(is_balanced("([]{})"))     # ✅ True
# print(is_balanced("([)]"))       # ❌ False
# print(is_balanced("{[]}()"))     # ✅ True
# print(is_balanced("{[}"))        # ❌ False

# def quicksort(arr):
#     if len(arr) <= 1:
#         return arr
#     pivot = arr[-1]  # You can use middle or random as well
#     left = [x for x in arr[:-1] if x.lower() <= pivot.lower()]
#     right = [x for x in arr[:-1] if x.lower() > pivot.lower()]
#     return quicksort(left) + [pivot] + quicksort(right)

# arr = ["banana", "apple", "cherry", "date"]
# sorted_arr = quicksort(arr)
# print(sorted_arr)
# # ➜ ['apple', 'banana', 'cherry', 'date']
